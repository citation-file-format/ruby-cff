var search_data = {"index":{"searchIndex":["cff","citable","entity","error","file","formatters","identifier","index","licensable","modelpart","person","reference","util","validatable","validationerror","add_language()","authors()","authors()","authors=()","authors=()","citation()","comment=()","contact()","contact()","contact=()","contact=()","editors()","editors=()","editors_series()","editors_series=()","empty?()","formatters()","from_cff()","identifiers()","identifiers()","identifiers=()","identifiers=()","keywords()","keywords()","keywords=()","keywords=()","languages()","license=()","new()","new()","new()","new()","new()","new()","open()","open()","patent_states()","patent_states=()","preferred_citation()","preferred_citation=()","read()","read()","recipients()","recipients=()","references()","references=()","register_formatter()","reset_languages()","senders()","senders=()","status=()","translators()","translators=()","type=()","type=()","type=()","validate()","validate()","validate()","validate!()","validate!()","validate!()","write()","write()","changes","code_of_conduct","contributing","licence","readme"],"longSearchIndex":["cff","cff::citable","cff::entity","cff::error","cff::file","cff::formatters","cff::identifier","cff::index","cff::licensable","cff::modelpart","cff::person","cff::reference","cff::util","cff::validatable","cff::validationerror","cff::reference#add_language()","cff::index#authors()","cff::reference#authors()","cff::index#authors=()","cff::reference#authors=()","cff::citable#citation()","cff::file#comment=()","cff::index#contact()","cff::reference#contact()","cff::index#contact=()","cff::reference#contact=()","cff::reference#editors()","cff::reference#editors=()","cff::reference#editors_series()","cff::reference#editors_series=()","cff::modelpart#empty?()","cff::formatters::formatters()","cff::reference::from_cff()","cff::index#identifiers()","cff::reference#identifiers()","cff::index#identifiers=()","cff::reference#identifiers=()","cff::index#keywords()","cff::reference#keywords()","cff::index#keywords=()","cff::reference#keywords=()","cff::reference#languages()","cff::licensable#license=()","cff::entity::new()","cff::file::new()","cff::identifier::new()","cff::index::new()","cff::person::new()","cff::reference::new()","cff::file::open()","cff::index::open()","cff::reference#patent_states()","cff::reference#patent_states=()","cff::index#preferred_citation()","cff::index#preferred_citation=()","cff::file::read()","cff::index::read()","cff::reference#recipients()","cff::reference#recipients=()","cff::index#references()","cff::index#references=()","cff::formatters::register_formatter()","cff::reference#reset_languages()","cff::reference#senders()","cff::reference#senders=()","cff::reference#status=()","cff::reference#translators()","cff::reference#translators=()","cff::identifier#type=()","cff::index#type=()","cff::reference#type=()","cff::file::validate()","cff::file#validate()","cff::validatable#validate()","cff::file::validate!()","cff::file#validate!()","cff::validatable#validate!()","cff::file::write()","cff::file#write()","","","","",""],"info":[["CFF","","CFF.html","","<p>This library provides a Ruby interface to manipulate CITATION.cff files. The\nprimary entry points are ...\n"],["CFF::Citable","","CFF/Citable.html","","<p>Methods to enable turning a CFF model or file into a citation.\n<p>The core functionality is in the <code>citation</code> …\n"],["CFF::Entity","","CFF/Entity.html","","<p>An Entity can represent different types of entities, e.g., a publishing\ncompany, or conference. Like ...\n"],["CFF::Error","","CFF/Error.html","","<p>Error is the base class for all errors raised by this library.\n"],["CFF::File","","CFF/File.html","","<p>File provides direct access to a CFF Index, with the addition of some\nfilesystem utilities.\n<p>To be a fully …\n"],["CFF::Formatters","","CFF/Formatters.html","","<p>A registry of output formatters for converting CFF files into citations.\n"],["CFF::Identifier","","CFF/Identifier.html","","<p>An Identifier represents an identifier in a CITATION.cff file.\n<p>Identifier implements all of the fields …\n"],["CFF::Index","","CFF/Index.html","","<p>Index is the core data structure for a CITATION.cff file. It can be\naccessed direcly, or via File.\n<p>Index …\n"],["CFF::Licensable","","CFF/Licensable.html","","<p>Functionality to add licence(s) to parts of the CFF model.\n"],["CFF::ModelPart","","CFF/ModelPart.html","","<p>ModelPart is the superclass of anything that makes up part of the CFF Index.\nThis includes Index, Person ...\n"],["CFF::Person","","CFF/Person.html","","<p>A Person represents a person in a CITATION.cff file. A Person might have a\nnumber of roles, such as author, ...\n"],["CFF::Reference","","CFF/Reference.html","","<p>Reference provides a reference pertaining to the software version or the\nsoftware itself, e.g., a software ...\n"],["CFF::Util","","CFF/Util.html","","<p>Util provides utility methods useful throughout the rest of the CFF library.\n<p>Util does not provide any …\n"],["CFF::Validatable","","CFF/Validatable.html","","<p>Methods to validate CFF files/models against a formal schema.\n"],["CFF::ValidationError","","CFF/ValidationError.html","","<p>ValidationError is raised when a CFF file fails validation. It contains\ndetails of each failure that ...\n"],["add_language","CFF::Reference","CFF/Reference.html#method-i-add_language","(lang)","<p>Add a language to this Reference. Input is converted to the ISO 639-3\nthree letter language code, so ...\n"],["authors","CFF::Index","CFF/Index.html#method-i-authors","","<p>Return the list of authors for this citation. To add an author to the\nlist, use:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">index</span>.<span class=\"ruby-identifier\">authors</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-identifier\">author</span>\n</pre>\n"],["authors","CFF::Reference","CFF/Reference.html#method-i-authors","","<p>Return the list of authors for this Reference. To add an author to the\nlist, use:\n\n<pre>reference.authors &lt;&lt; ...</pre>\n"],["authors=","CFF::Index","CFF/Index.html#method-i-authors-3D","","<p>Replace the list of authors for this citation.\n<p>Authors can be a Person or Entity.\n"],["authors=","CFF::Reference","CFF/Reference.html#method-i-authors-3D","","<p>Replace the list of authors for this reference.\n<p>Authors can be a Person or Entity.\n"],["citation","CFF::Citable","CFF/Citable.html#method-i-citation","(format, preferred_citation: true)","<p>Output this Index in the specified format. Setting\n<code>preferred_citation: true</code> will honour the <code>preferred_citation</code> ...\n"],["comment=","CFF::File","CFF/File.html#method-i-comment-3D","(comment)","<p>A comment to be inserted at the top of the resultant CFF file. This can\nbe supplied as a simple string ...\n"],["contact","CFF::Index","CFF/Index.html#method-i-contact","","<p>Return the list of contacts for this citation. To add a contact to the\nlist, use:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">index</span>.<span class=\"ruby-identifier\">contact</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-identifier\">contact</span>\n</pre>\n"],["contact","CFF::Reference","CFF/Reference.html#method-i-contact","","<p>Return the list of contacts for this Reference. To add a contact to the\nlist, use:\n\n<pre>reference.contact &lt;&lt; ...</pre>\n"],["contact=","CFF::Index","CFF/Index.html#method-i-contact-3D","","<p>Replace the list of contacts for this citation.\n<p>Contacts can be a Person or Entity.\n"],["contact=","CFF::Reference","CFF/Reference.html#method-i-contact-3D","","<p>Replace the list of contacts for this reference.\n<p>Contacts can be a Person or Entity.\n"],["editors","CFF::Reference","CFF/Reference.html#method-i-editors","","<p>Return the list of editors for this Reference. To add an editor to the\nlist, use:\n\n<pre>reference.editors &lt;&lt; ...</pre>\n"],["editors=","CFF::Reference","CFF/Reference.html#method-i-editors-3D","","<p>Replace the list of editors for this reference.\n<p>Editors can be a Person or Entity.\n"],["editors_series","CFF::Reference","CFF/Reference.html#method-i-editors_series","","<p>Return the list of series editors for this Reference. To add a series\neditor to the list, use:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">reference</span>.<span class=\"ruby-identifier\">editors_series</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["editors_series=","CFF::Reference","CFF/Reference.html#method-i-editors_series-3D","","<p>Replace the list of series editors for this reference.\n<p>Series editors can be a Person or Entity.\n"],["empty?","CFF::ModelPart","CFF/ModelPart.html#method-i-empty-3F","()","<p>Define <code>empty?</code> for CFF classes so that they can be tested in the\nsame way as strings and arrays.\n<p>This always …\n"],["formatters","CFF::Formatters","CFF/Formatters.html#method-c-formatters","()","<p>Return the list of formatters that are available.\n"],["from_cff","CFF::Reference","CFF/Reference.html#method-c-from_cff","(model, type: 'software')","<p>Create a Reference from another CFF File or Index. This is useful for\neasily adding a reference to something ...\n"],["identifiers","CFF::Index","CFF/Index.html#method-i-identifiers","","<p>Return the list of identifiers for this citation. To add a identifier to\nthe list, use:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">index</span>.<span class=\"ruby-identifier\">identifiers</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["identifiers","CFF::Reference","CFF/Reference.html#method-i-identifiers","","<p>Return the list of identifiers for this citation. To add a identifier to\nthe list, use:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">reference</span>.<span class=\"ruby-identifier\">identifiers</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["identifiers=","CFF::Index","CFF/Index.html#method-i-identifiers-3D","","<p>Replace the list of identifiers for this citation.\n"],["identifiers=","CFF::Reference","CFF/Reference.html#method-i-identifiers-3D","","<p>Replace the list of identifiers for this citation.\n"],["keywords","CFF::Index","CFF/Index.html#method-i-keywords","","<p>Return the list of keywords for this citation. To add a keyword to the\nlist, use:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">index</span>.<span class=\"ruby-identifier\">keywords</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-identifier\">keyword</span>\n</pre>\n"],["keywords","CFF::Reference","CFF/Reference.html#method-i-keywords","","<p>Return the list of keywords for this reference. To add a keyword to the\nlist, use:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">reference</span>.<span class=\"ruby-identifier\">keywords</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["keywords=","CFF::Index","CFF/Index.html#method-i-keywords-3D","","<p>Replace the list of keywords for this citation.\n<p>Keywords will be converted to Strings on output.\n"],["keywords=","CFF::Reference","CFF/Reference.html#method-i-keywords-3D","","<p>Replace the list of keywords for this reference.\n<p>Keywords will be converted to Strings on output.\n"],["languages","CFF::Reference","CFF/Reference.html#method-i-languages","()","<p>Return the list of languages associated with this Reference.\n"],["license=","CFF::Licensable","CFF/Licensable.html#method-i-license-3D","(lic)","<p>Set the license, or licenses, of this work. Only licenses that conform\nto the SPDX License List will ...\n"],["new","CFF::Entity","CFF/Entity.html#method-c-new","(param)","<p>Create a new Entity with the supplied name.\n"],["new","CFF::File","CFF/File.html#method-c-new","(filename, param, comment = CFF_COMMENT, create: false)","<p>Create a new File. Either a pre-existing Index can be passed in or, as\nwith Index itself, a title can ...\n"],["new","CFF::Identifier","CFF/Identifier.html#method-c-new","(param = nil, *more)","<p>Create a new Identifier with the optionally supplied type and value.\nIf the supplied type is invalid, ...\n"],["new","CFF::Index","CFF/Index.html#method-c-new","(param)","<p>Initialize a new Index with the supplied title.\n"],["new","CFF::Person","CFF/Person.html#method-c-new","(param = nil, *more)","<p>Create a new Person with the optionally supplied given and family names.\n"],["new","CFF::Reference","CFF/Reference.html#method-c-new","(param, *more)","<p>Create a new Reference with the supplied title and, optionally, type.\nIf type is not given, or is not ...\n"],["open","CFF::File","CFF/File.html#method-c-open","(file)","<p>With no associated block, File.open is a synonym for ::read. If the\noptional code block is given, it ...\n"],["open","CFF::Index","CFF/Index.html#method-c-open","(index)","<p>With no associated block, Index.open is a synonym for ::read. If the\noptional code block is given, it ...\n"],["patent_states","CFF::Reference","CFF/Reference.html#method-i-patent_states","","<p>Return the list of patent states for this reference. To add a patent\nstate to the list, use:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">reference</span>.<span class=\"ruby-identifier\">patent_states</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["patent_states=","CFF::Reference","CFF/Reference.html#method-i-patent_states-3D","","<p>Replace the list of patent states for this reference.\n<p>Patent states will be converted to Strings on output. …\n"],["preferred_citation","CFF::Index","CFF/Index.html#method-i-preferred_citation","","<p>Return the preferred citation for this citation.\n"],["preferred_citation=","CFF::Index","CFF/Index.html#method-i-preferred_citation-3D","","<p>Replace the preferred citation for this citation.\n"],["read","CFF::File","CFF/File.html#method-c-read","(file)","<p>Read a file and parse it for subsequent manipulation.\n"],["read","CFF::Index","CFF/Index.html#method-c-read","(index)","<p>Read a CFF Index from a String and parse it for subsequent manipulation.\n"],["recipients","CFF::Reference","CFF/Reference.html#method-i-recipients","","<p>Return the list of recipients for this Reference. To add a recipient\nto the list, use:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">reference</span>.<span class=\"ruby-identifier\">recipients</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["recipients=","CFF::Reference","CFF/Reference.html#method-i-recipients-3D","","<p>Replace the list of recipients for this reference.\n<p>Recipients can be a Person or Entity.\n"],["references","CFF::Index","CFF/Index.html#method-i-references","","<p>Return the list of references for this citation. To add a reference to the\nlist, use:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">index</span>.<span class=\"ruby-identifier\">references</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["references=","CFF::Index","CFF/Index.html#method-i-references-3D","","<p>Replace the list of references for this citation.\n"],["register_formatter","CFF::Formatters","CFF/Formatters.html#method-c-register_formatter","(clazz)","<p>Register a citation formatter. To be registered as a formatter, a\nclass should at least provide the following ...\n"],["reset_languages","CFF::Reference","CFF/Reference.html#method-i-reset_languages","()","<p>Reset the list of languages for this Reference to be empty.\n"],["senders","CFF::Reference","CFF/Reference.html#method-i-senders","","<p>Return the list of senders for this Reference. To add a sender to the\nlist, use:\n\n<pre>reference.senders &lt;&lt; ...</pre>\n"],["senders=","CFF::Reference","CFF/Reference.html#method-i-senders-3D","","<p>Replace the list of senders for this reference.\n<p>Senders can be a Person or Entity.\n"],["status=","CFF::Reference","CFF/Reference.html#method-i-status-3D","(status)","<p>Sets the status of this Reference. The status is restricted to a\ndefined set of status types.\n"],["translators","CFF::Reference","CFF/Reference.html#method-i-translators","","<p>Return the list of translators for this Reference. To add a translator\nto the list, use:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">reference</span>.<span class=\"ruby-identifier\">translators</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["translators=","CFF::Reference","CFF/Reference.html#method-i-translators-3D","","<p>Replace the list of translators for this reference.\n<p>Translators can be a Person or Entity.\n"],["type=","CFF::Identifier","CFF/Identifier.html#method-i-type-3D","(type)","<p>Sets the type of this Identifier. The type is restricted to a\ndefined set of identifier types.\n"],["type=","CFF::Index","CFF/Index.html#method-i-type-3D","(type)","<p>Sets the type of this CFF Index. The type is currently restricted to one\nof <code>software</code> or <code>dataset</code>. If this ...\n"],["type=","CFF::Reference","CFF/Reference.html#method-i-type-3D","(type)","<p>Sets the type of this Reference. The type is restricted to a\ndefined set of reference types.\n"],["validate","CFF::File","CFF/File.html#method-c-validate","(file, fail_on_filename: true)","<p>Read a file and return an array with the result. The result array is a\nthree-element array, with <code>true</code> ...\n"],["validate","CFF::File","CFF/File.html#method-i-validate","(fail_fast: false, fail_on_filename: true)","<p>Validate this file and return an array with the result. The result array\nis a three-element array, with ...\n"],["validate","CFF::Validatable","CFF/Validatable.html#method-i-validate","(fail_fast: false)","<p>Validate a CFF file or model (Index) and return an array with the result.\nThe result array is a two-element ...\n"],["validate!","CFF::File","CFF/File.html#method-c-validate-21","(file, fail_on_filename: true)","<p>Read a file and raise a ValidationError upon failure. If an error is\nraised it will contain the detected ...\n"],["validate!","CFF::File","CFF/File.html#method-i-validate-21","(fail_fast: false, fail_on_filename: true)","<p>Validate this file and raise a ValidationError upon failure. If an error\nis raised it will contain the ...\n"],["validate!","CFF::Validatable","CFF/Validatable.html#method-i-validate-21","(fail_fast: false)","<p>Validate a CFF file or model (Index) and raise a ValidationError upon\nfailure. If an error is raised ...\n"],["write","CFF::File","CFF/File.html#method-c-write","(file, cff, comment = '')","<p>Write the supplied File, Index or yaml string to <code>file</code>.\n"],["write","CFF::File","CFF/File.html#method-i-write","(save_as: nil)","<p>Write this CFF File. The <code>save_as</code> parameter can be used to save a new\ncopy of this CFF File under a different ...\n"],["CHANGES","","CHANGES_md.html","","<p>Changes log for the Ruby CFF Library\n<p>1.0.1\n<p>Handle missing family or given names for authors.\n"],["CODE_OF_CONDUCT","","CODE_OF_CONDUCT_md.html","","<p>Contributor Covenant Code of Conduct\n<p>Our Pledge\n<p>In the interest of fostering an open and welcoming environment, …\n"],["CONTRIBUTING","","CONTRIBUTING_md.html","","<p>Contributing to the Ruby CFF Library\n<p>Introduction\n<p><strong>Thank you</strong> for considering a contribution to the <strong>Ruby</strong> …\n"],["LICENCE","","LICENCE.html","","\n<pre>         Apache License\n   Version 2.0, January 2004\nhttp://www.apache.org/licenses/</pre>\n<p>TERMS AND CONDITIONS …\n"],["README","","README_md.html","","<p>Ruby CFF\n<p>Robert Haines and The Ruby Citation File Format Developers\n<p>A Ruby library for creating, editing, …\n"]]}}